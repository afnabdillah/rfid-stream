{"version":3,"sources":["../src/index.ts","../src/rfid-mapper.ts","../src/rfid-stream.ts"],"sourcesContent":["import { RFIDStream, HIDOpts } from \"./rfid-stream\";\r\n\r\nexport { HIDOpts, RFIDStream }","class RFIDMapper {\r\n    constructor() {\r\n    }\r\n\r\n    private getKeyCode = (buffer: Buffer) => {\r\n        const packet = buffer.toJSON().data\r\n        /** remove first number */\r\n        packet.shift()\r\n        const keyCode = packet.find(el => el !== 0)\r\n        return keyCode\r\n    }\r\n\r\n    getCharCode = (buffer: Buffer) => {\r\n        /**\r\n         * Char code reference: https://usb.org/sites/default/files/hut1_4.pdf\r\n         * page 89\r\n         */\r\n        const num = this.getKeyCode(buffer)\r\n        switch (num) {\r\n            case 30: return \"1\";\r\n            case 31: return \"2\";\r\n            case 32: return \"3\";\r\n            case 33: return \"4\";\r\n            case 34: return \"5\";\r\n            case 35: return \"6\";\r\n            case 36: return \"7\";\r\n            case 37: return \"8\";\r\n            case 38: return \"9\";\r\n            case 39: return \"0\";\r\n\r\n            /** enter */\r\n            case 40: return \"\\n\";\r\n\r\n            /** other characters are omitted since rfid doesn't contain them */\r\n\r\n            default: return;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { RFIDMapper }","import { RFIDMapper } from \"./rfid-mapper\";\r\nimport { Stream } from \"stream\";\r\nimport HID from \"node-hid\";\r\n\r\ntype HIDOpts1 = {\r\n    vendorId: number\r\n    productId: number\r\n    path?: string\r\n}\r\n\r\ntype HIDOpts2 = {\r\n    vendorId?: number\r\n    productId?: number\r\n    path: string\r\n}\r\n\r\nexport type HIDOpts = HIDOpts2 | (HIDOpts1 & HIDOpts2)\r\n\r\nclass RFIDStream extends Stream {\r\n    public device;\r\n    public vendorId;\r\n    public productId;\r\n    public path;\r\n    private rfidMapper;\r\n    private result: string;\r\n\r\n    constructor(opts: HIDOpts) {\r\n        super()\r\n        this.validate(opts)\r\n        this.result = \"\"\r\n\r\n        this.vendorId = opts.vendorId ?? 0\r\n        this.productId = opts.productId ?? 0\r\n        this.path = opts.path\r\n\r\n        this.device = this.getDevice()\r\n        this.rfidMapper = new RFIDMapper()\r\n\r\n        this.start()\r\n    }\r\n\r\n    private validate(opts: HIDOpts) {\r\n        if (!opts) {\r\n            throw new Error(\"Options must be filled\")\r\n        }\r\n        if (!opts.vendorId || typeof opts.vendorId !== \"number\") {\r\n            throw new Error(\"Vendor id must be filled\")\r\n        }\r\n        if (!opts.productId || typeof opts.productId !== \"number\") {\r\n            throw new Error(\"Product id must be filled\")\r\n        }\r\n        if ((!opts.vendorId && !opts.productId) && typeof opts.path !== \"string\") {\r\n            throw new Error(\"Path must be filled with string\")\r\n        }\r\n    }\r\n\r\n    private getDevice() {\r\n        if (this.path) {\r\n            return new HID.HID(this.path)\r\n        } else {\r\n            return new HID.HID(this.vendorId, this.productId)\r\n        }\r\n    }\r\n\r\n    static listDevices() {\r\n        return HID.devices()\r\n    }\r\n\r\n    static listDevicesAsync() {\r\n        return HID.devicesAsync()\r\n    }\r\n\r\n    start() {\r\n        this.device.on(\"data\", (data: Buffer) => {\r\n            const char = this.rfidMapper.getCharCode(data)\r\n            if (char === \"\\n\") {\r\n                this.emit(\"data\", this.result)\r\n                this.result = \"\"\r\n            }\r\n            if (typeof char === \"string\") {\r\n                this.result += char\r\n            }\r\n        })\r\n        this.device.on(\"error\", (err) => this.emit(\"error\", err))\r\n        this.device.on(\"end\", (end) => this.emit(\"end\", end))\r\n    }\r\n\r\n    close() {\r\n        this.device.close()\r\n    }\r\n\r\n    pause() {\r\n        this.device.pause()\r\n    }\r\n\r\n    resume() {\r\n        this.device.resume()\r\n    }\r\n}\r\n\r\nexport { RFIDStream }"],"mappings":"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","names":["HID"]}